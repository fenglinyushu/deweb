unit OpenViewURL;

interface

function OpenURL(const URL: string; const DisplayError: Boolean = False): Boolean;

implementation

uses
  IdURI, SysUtils, Classes, FMX.Dialogs
{$IFDEF MSWINDOWS}
    , Winapi.Windows, Winapi.ShellAPI
{$ENDIF}
{$IFDEF POSIX}
    , Posix.Stdlib
{$ENDIF POSIX}
{$IFDEF ANDROID}
    , Androidapi.Helpers, FMX.Helpers.Android, Androidapi.JNI.GraphicsContentViewText, Androidapi.JNI.Net,
  Androidapi.JNI.JavaTypes
{$ENDIF}
{$IFDEF IOS}
    , Macapi.Helpers, iOSapi.Foundation, FMX.Helpers.iOS
{$ENDIF}
    ;

function OpenURL(const URL: string; const DisplayError: Boolean = False): Boolean;

{$IFDEF ANDROID}
var
  Intent: JIntent;
begin
  Intent := TJIntent.JavaClass.init(TJIntent.JavaClass.ACTION_VIEW,
    TJnet_Uri.JavaClass.parse(StringToJString(TIdURI.URLEncode(URL))));
  try
    TAndroidHelper.Activity.startActivity(Intent);
    // SharedActivity.startActivity(Intent);
    exit(true);
  except
    on e: Exception do
    begin
      if DisplayError then
        ShowMessage('Error: ' + e.Message);
      exit(False);
    end;
  end;
end;
{$ELSE}
{$IFDEF IOS}

var
  NSU: NSUrl;
begin
  NSU := StrToNSUrl(TIdURI.URLEncode(URL));
  if SharedApplication.canOpenURL(NSU) then
    exit(SharedApplication.OpenURL(NSU))
  else
  begin
    if DisplayError then
      ShowMessage('Error: Opening "' + URL + '" not supported.');
    exit(False);
  end;
end;
{$ELSE}

begin
{$IFDEF MSWINDOWS}
  begin
    ShellExecute(0, nil, PChar(URL), nil, nil, 1);
    exit(true);
  end;
{$ENDIF}
{$IFDEF POSIX}
  _system(PAnsiChar('open ' + AnsiString(URL)));
  exit(true);
{$ENDIF POSIX}
  raise Exception.Create('不支持访问!');
end;
{$ENDIF IOS}
{$ENDIF ANDROID}

end.
